// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
  playerID, birthYear, nameFirst, nameLast
) VALUES (
  $1, $2, $3, $4
)
RETURNING playerid, birthyear, namefirst, namelast
`

type CreatePlayerParams struct {
	Playerid  string
	Birthyear sql.NullInt32
	Namefirst sql.NullString
	Namelast  sql.NullString
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.Playerid,
		arg.Birthyear,
		arg.Namefirst,
		arg.Namelast,
	)
	var i Player
	err := row.Scan(
		&i.Playerid,
		&i.Birthyear,
		&i.Namefirst,
		&i.Namelast,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM players
WHERE playerID = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, playerid string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, playerid)
	return err
}

const getPlayer = `-- name: GetPlayer :one

SELECT playerid, birthyear, namefirst, namelast FROM players
WHERE playerID = $1 LIMIT 1
`

// query.sql
func (q *Queries) GetPlayer(ctx context.Context, playerid string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, playerid)
	var i Player
	err := row.Scan(
		&i.Playerid,
		&i.Birthyear,
		&i.Namefirst,
		&i.Namelast,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT playerid, birthyear, namefirst, namelast FROM players
ORDER BY playerID
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.Playerid,
			&i.Birthyear,
			&i.Namefirst,
			&i.Namelast,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
